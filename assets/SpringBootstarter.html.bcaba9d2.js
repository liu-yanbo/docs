import{_ as n,X as c,Y as a,a0 as o,a2 as e,$ as r,a3 as s,B as d}from"./framework.485a9db6.js";const i={},p=o("h2",{id:"_1-前言",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#_1-前言","aria-hidden":"true"},"#"),e(" 1. 前言")],-1),_=o("code",null,"Springboot",-1),l={href:"https://www.wdbyte.com/2019/01/springboot/springboot03-auto-config/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.wdbyte.com/2019/01/springboot/springboot03-auto-config/",target:"_blank",rel:"noopener noreferrer"},h=s("<p>在这一次，通过学习 <code>Springboot</code> 自动配置模式，编写一个自己的 <code>starter</code>，用来加深对自动配置的理解。</p><p>熟悉模式，有助于提升编写的 <code>starter</code> 的规范性，编写自己的 <code>starter</code> 之前先来学习 <code>Springboot</code> 官方 <code>starter</code> 以及常见框架的整合 <code>starter</code> 的编写方式 ，可以领略到其中的奥秘。</p>",2);function b(f,w){const t=d("ExternalLinkIcon");return c(),a("div",null,[p,o("p",null,[_,e(" 中的自动配置确实方便，减少了我们开发上的复杂性，那么自动配置原理是什么呢？之前我也写过了一篇文章进行了分析。 "),o("a",l,[e("Springboot 系列（三）Spring Boot 自动配置 (opens new window)"),r(t)]),e("。 由于自动配置用到了配置文件的绑定，如果你还不知道常见的配置文件的用法，可以参考这篇文章。 "),o("a",g,[e("Springboot 系列（二）Spring Boot 配置文件 (opens new window)"),r(t)]),e("。")]),h])}const u=n(i,[["render",b],["__file","SpringBootstarter.html.vue"]]);export{u as default};
