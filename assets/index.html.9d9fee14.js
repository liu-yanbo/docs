import{_ as r,V as p,W as s,Z as l,a0 as i,Y as a,$ as n,a1 as t,z as o}from"./framework.8958f656.js";const h="/assets/Java基础.98de1660.svg",d={},c=t('<h2 id="java-基础语言知识体系" tabindex="-1"><a class="header-anchor" href="#java-基础语言知识体系" aria-hidden="true">#</a> Java 基础语言知识体系</h2><p><img src="'+h+'" alt="基础语言知识体系.png" loading="lazy"></p><h2 id="_0-概述" tabindex="-1"><a class="header-anchor" href="#_0-概述" aria-hidden="true">#</a> 0. 概述</h2><blockquote><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li><li><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li><li><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li></ul></blockquote><h2 id="_1-基础语言" tabindex="-1"><a class="header-anchor" href="#_1-基础语言" aria-hidden="true">#</a> 1. 基础语言</h2><h3 id="_1-1-核心语言" tabindex="-1"><a class="header-anchor" href="#_1-1-核心语言" aria-hidden="true">#</a> 1.1 核心语言</h3>',6),_=l("p",null,"语言元素",-1),g={href:"http://img.mgd2008.com/Java%20%E5%85%B3%E9%94%AE%E5%AD%97.png",target:"_blank",rel:"noopener noreferrer"},f=l("ul",null,[l("li",null,"关键字不能用于常量、变量、和任何标识符的名称"),l("li",null,"Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用。")],-1),v=l("li",null,[l("p",null,"标识符"),l("p",null,"Java 所有组成部分都需要名字。类名、变量名以及方法名都被称为标识符。"),l("ul",null,[l("li",null,"以字母、$、下划线开头"),l("li",null,"首字母之后可以使用 以字母、数字、$、下划线任意几种"),l("li",null,"关键字不能作为标识符"),l("li",null,"标识符对大小敏感")])],-1),b=t("<ul><li><p>访问修饰符</p><blockquote><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p></blockquote><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>public</strong> 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>private</strong> 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>protected</strong> 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul></li><li><p>非访问修饰符</p><ul><li>static</li><li>final</li><li>abstract</li><li>synchronized</li><li>transient</li><li>volatile</li></ul></li></ul>",1),m=l("li",null,[l("p",null,"运算符"),l("ul",null,[l("li",null,"算数运算符"),l("li",null,"关系运算符"),l("li",null,"位运算符"),l("li",null,"逻辑运算符"),l("li",null,"赋值运算符"),l("li",null,"其它运算符")])],-1),x=l("li",null,[l("p",null,"分隔符")],-1),k=t("<li><p>变量、常量和字面量</p><ul><li><p>变量</p></li><li><p>常量</p></li><li><p>字面量（直接量）</p><ul><li><p>整型字面量</p><ul><li>100</li><li>123L 整型字面量</li></ul></li><li><p>实型字面量</p><ul><li>9.8F 浮点型</li><li>3.14</li><li>3.2E-3</li></ul></li><li><p>字符字面量</p><ul><li>&#39;a&#39;</li><li>&#39;\\t&#39;</li><li>&#39;\\105&#39; 大写字母E</li></ul></li><li><p>字符串字面量</p><ul><li>&quot;hello&quot;</li></ul></li><li><p>布尔字面量</p><ul><li>true</li><li>false</li></ul></li><li><p>引用字面量</p><ul><li>null</li></ul></li><li><p>类型字面量</p><ul><li>int.class</li><li>String.class</li></ul></li></ul></li></ul></li><li><p>数据类型</p><ul><li><p>基本类型</p><ul><li><p>数值类型</p><ul><li><p>整型</p><ul><li>byte （1字节）</li><li>short （2字节）</li><li>int （4字节）</li><li>long（8字节）</li></ul></li><li><p>浮点型</p><ul><li>float（4字节）</li></ul></li><li><p>double（8字节）</p></li></ul></li><li><p>布尔型</p><ul><li>boolean</li></ul></li><li><p>字符型</p><ul><li><p>2字节</p><ul><li>Unicode</li></ul></li></ul></li></ul></li><li><p>枚举类型</p><ul><li>符号常量</li></ul></li><li><p>引用类型</p><ul><li>对象</li></ul></li></ul></li>",2),E=t('<h3 id="_1-2-字符串" tabindex="-1"><a class="header-anchor" href="#_1-2-字符串" aria-hidden="true">#</a> 1.2 字符串</h3><ul><li><p>创建字符串</p><ul><li>String Str =“hello”; str 引用静态区的字符串字面量</li><li>String str = new String(&quot;hello&quot;); str引用堆上的字符串字面量</li></ul></li><li><p>操作字符串</p></li></ul><h3 id="_1-3-数组" tabindex="-1"><a class="header-anchor" href="#_1-3-数组" aria-hidden="true">#</a> 1.3 数组</h3><ul><li>一维数组</li><li>二维数组</li></ul><h3 id="_1-4-循环结构" tabindex="-1"><a class="header-anchor" href="#_1-4-循环结构" aria-hidden="true">#</a> 1.4 循环结构</h3><ul><li>while</li><li>do...while</li><li>for</li></ul><h3 id="_1-5-分支结构" tabindex="-1"><a class="header-anchor" href="#_1-5-分支结构" aria-hidden="true">#</a> 1.5 分支结构</h3><ul><li>if..else</li><li>switch...case..default</li></ul><h2 id="_3-基础机制" tabindex="-1"><a class="header-anchor" href="#_3-基础机制" aria-hidden="true">#</a> 3. 基础机制</h2><ol><li><p>泛型</p></li><li><p>注解</p></li><li><p>注释</p></li><li><p>反射</p></li><li><p>异常</p></li><li><p>SPI</p></li></ol><h2 id="_2-面向对象" tabindex="-1"><a class="header-anchor" href="#_2-面向对象" aria-hidden="true">#</a> 2. 面向对象</h2>',11);function J(j,q){const u=o("ExternalLinkIcon"),e=o("RouterLink");return p(),s("div",null,[c,l("ul",null,[l("li",null,[_,l("ul",null,[l("li",null,[l("p",null,[l("a",g,[i("关键字"),a(u)])]),f]),v,l("li",null,[l("p",null,[a(e,{to:"/java/oop/java-basic-lang.html"},{default:n(()=>[i("修饰符")]),_:1})]),b]),m,x])]),k]),E,l("ul",null,[l("li",null,[l("p",null,[a(e,{to:"/java/oop/oop-encapsulation.html"},{default:n(()=>[i("封装")]),_:1})])]),l("li",null,[l("p",null,[a(e,{to:"/java/oop/oop-inheritance.html"},{default:n(()=>[i("继承")]),_:1}),i(" && "),a(e,{to:"/java/oop/oop-inheritance-details.html"},{default:n(()=>[i("详解 Java 继承")]),_:1})])]),l("li",null,[l("p",null,[a(e,{to:"/java/oop/oop-polymorphism.html"},{default:n(()=>[i("多态")]),_:1})])])])])}const w=r(d,[["render",J],["__file","index.html.vue"]]);export{w as default};
