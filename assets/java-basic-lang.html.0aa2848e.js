import{_ as t,X as d,Y as r,a3 as a}from"./framework.485a9db6.js";const e={},i=a('<h2 id="java-关键字" tabindex="-1"><a class="header-anchor" href="#java-关键字" aria-hidden="true">#</a> Java 关键字</h2><blockquote><p>关键字是电脑语言里事先定义的，有特别意义的标识符。</p><p>程序员利用关键字来告诉编译器其声明的变量类型、类、方法特性等信息。</p><p>关键字不能用作变量名、方法名、类名、包名和参数。</p></blockquote><p><strong>Java 中的关键字如下</strong></p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>abstract</td><td>抽象方法，抽象类的修饰符</td></tr><tr><td>assert</td><td>断言条件是否满足</td></tr><tr><td>boolean</td><td>布尔数据类型</td></tr><tr><td>break</td><td>跳出循环或者label代码段</td></tr><tr><td>byte</td><td>8-bit 有符号数据类型</td></tr><tr><td>case</td><td>switch语句的一个条件</td></tr><tr><td>catch</td><td>和try搭配捕捉异常信息</td></tr><tr><td>char</td><td>16-bit Unicode字符数据类型</td></tr><tr><td>class</td><td>定义类</td></tr><tr><td>const</td><td>未使用</td></tr><tr><td>continue</td><td>不执行循环体剩余部分</td></tr><tr><td>default</td><td>switch语句中的默认分支</td></tr><tr><td>do</td><td>循环语句，循环体至少会执行一次</td></tr><tr><td>double</td><td>64-bit双精度浮点数</td></tr><tr><td>else</td><td>if条件不成立时执行的分支</td></tr><tr><td>enum</td><td>枚举类型</td></tr><tr><td>extends</td><td>表示一个类是另一个类的子类</td></tr><tr><td>final</td><td>表示一个值在初始化之后就不能再改变了 表示方法不能被重写，或者一个类不能有子类</td></tr><tr><td>finally</td><td>为了完成执行的代码而设计的，主要是为了程序的健壮性和完整性，无论有没有异常发生都执行代码。</td></tr><tr><td>float</td><td>32-bit单精度浮点数</td></tr><tr><td>for</td><td>for循环语句</td></tr><tr><td>goto</td><td>未使用</td></tr><tr><td>if</td><td>条件语句</td></tr><tr><td>implements</td><td>表示一个类实现了接口</td></tr><tr><td>import</td><td>导入类</td></tr><tr><td>instanceof</td><td>测试一个对象是否是某个类的实例</td></tr><tr><td>int</td><td>32位整型数</td></tr><tr><td>interface</td><td>接口，一种抽象的类型，仅有方法和常量的定义</td></tr><tr><td>long</td><td>64位整型数</td></tr><tr><td>native</td><td>表示方法用非java代码实现</td></tr><tr><td>new</td><td>分配新的类实例</td></tr><tr><td>package</td><td>一系列相关类组成一个包</td></tr><tr><td>private</td><td>表示私有字段，或者方法等，只能从类内部访问</td></tr><tr><td>protected</td><td>表示字段只能通过类或者其子类访问 子类或者在同一个包内的其他类</td></tr><tr><td>public</td><td>表示共有属性或者方法</td></tr><tr><td>return</td><td>方法返回值</td></tr><tr><td>short</td><td>16位数字</td></tr><tr><td>static</td><td>表示在类级别定义，所有实例共享的</td></tr><tr><td>strictfp</td><td>浮点数比较使用严格的规则</td></tr><tr><td>super</td><td>表示基类</td></tr><tr><td>switch</td><td>选择语句</td></tr><tr><td>synchronized</td><td>表示同一时间只能由一个线程访问的代码块</td></tr><tr><td>this</td><td>表示调用当前实例 或者调用另一个构造函数</td></tr><tr><td>throw</td><td>抛出异常</td></tr><tr><td>throws</td><td>定义方法可能抛出的异常</td></tr><tr><td>transient</td><td>修饰不要序列化的字段</td></tr><tr><td>try</td><td>表示代码块要做异常处理或者和finally配合表示是否抛出异常都执行finally中的代码</td></tr><tr><td>void</td><td>标记方法不返回任何值</td></tr><tr><td>volatile</td><td>标记字段可能会被多个线程同时访问，而不做同步</td></tr><tr><td>while</td><td>while循环</td></tr></tbody></table><h2 id="java-修饰符" tabindex="-1"><a class="header-anchor" href="#java-修饰符" aria-hidden="true">#</a> Java 修饰符</h2><blockquote><p>Java 语言提供了许多修饰符，主要分为两种</p><ul><li>访问修饰符</li><li>非访问修饰符</li></ul></blockquote><h3 id="访问控制修饰符" tabindex="-1"><a class="header-anchor" href="#访问控制修饰符" aria-hidden="true">#</a> 访问控制修饰符</h3><blockquote><p>Java 中可以使用访问控制修饰符来保护对类、变量、方法和构造方法的访问。Java支持4中不同的访问权限。</p></blockquote><h3 id="非访问控制修饰符" tabindex="-1"><a class="header-anchor" href="#非访问控制修饰符" aria-hidden="true">#</a> 非访问控制修饰符</h3>',9),o=[i];function n(c,l){return d(),r("div",null,o)}const h=t(e,[["render",n],["__file","java-basic-lang.html.vue"]]);export{h as default};
