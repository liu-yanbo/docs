const e=JSON.parse('{"key":"v-3584b8ff","path":"/java/oop/oop-inheritance.html","title":"","lang":"zh-CN","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":"：","6":"J","7":"a","8":"v","9":"a","10":" ","11":"面","12":"向","13":"对","14":"象","15":" ","16":"-","17":" ","18":"继","19":"承","description":"在上一篇系列文章中，我们聊过了面向对象的“封装”特征。在有了封装的基础上，今天我们在来谈谈面向对象第二个特征—-“继承”。 👨‍🏫“继承”这个知识点在同学们学习的过程中，其实并不算是一个难点。在语法上，Java也把它设计得非常简单，一个extends关键字就可以搞定；在理解上，“继承”这个词在生活中也很常见，不存在什么晦涩难懂的地方。但一旦涉及到具...","head":[["meta",{"property":"og:url","content":"https://liu-yanbo.github.io/java/oop/oop-inheritance.html"}],["meta",{"property":"og:site_name","content":"橘涂拾捌的wiki"}],["meta",{"property":"og:description","content":"在上一篇系列文章中，我们聊过了面向对象的“封装”特征。在有了封装的基础上，今天我们在来谈谈面向对象第二个特征—-“继承”。 👨‍🏫“继承”这个知识点在同学们学习的过程中，其实并不算是一个难点。在语法上，Java也把它设计得非常简单，一个extends关键字就可以搞定；在理解上，“继承”这个词在生活中也很常见，不存在什么晦涩难懂的地方。但一旦涉及到具..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-09T14:29:07.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-09T14:29:07.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"继承的由来","slug":"继承的由来","link":"#继承的由来","children":[]},{"level":2,"title":"继承使用的原则","slug":"继承使用的原则","link":"#继承使用的原则","children":[]},{"level":2,"title":"Java的继承机制","slug":"java的继承机制","link":"#java的继承机制","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1673274547000,"updatedTime":1673274547000,"contributors":[{"name":"liuyanbo","email":"liuyanbo@ipplus360.com","commits":1}]},"readingTime":{"minutes":8.27,"words":2482},"autoDesc":true,"localizedDate":"2023年1月9日","filePathRelative":"java/oop/oop-inheritance.md"}');export{e as data};
